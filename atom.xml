<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YitaiCloud</title>
  
  <subtitle>以太云</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tisonkong.github.io/github.io/"/>
  <updated>2018-02-07T13:53:15.364Z</updated>
  <id>https://tisonkong.github.io/github.io/</id>
  
  <author>
    <name>Tison</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>区块链技术栈及学习路线</title>
    <link href="https://tisonkong.github.io/github.io/2018/02/07/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB%E5%8F%8A%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>https://tisonkong.github.io/github.io/2018/02/07/区块链技术体系及学习路线/</id>
    <published>2018-02-07T08:32:39.449Z</published>
    <updated>2018-02-07T13:53:15.364Z</updated>
    
    <content type="html"><![CDATA[<p>仿佛一夜之间，互联网和金融圈都在谈论区块链，而区块链的发展无疑是借着数字货币之浪潮而起，而后被熟知、被认可到如今的大势所趋，目前科技与工业界的共识是区块链将会成为引领第四次工业革命的关键技术，回看2015年火爆的虚拟现实，2016年流行的大数据，2017年独领风骚的人工智能，2018年毫无疑问将会是区块链的元年，<a id="more"></a>可以看到各种新技术的创新迭代正在以前所未有的速度在加快，热门技术的退潮并不是简单的历史更迭，更像是在蓄势引爆一个临界的奇点，有人如此概括：在第四次工业革命中，<a href="https://mp.weixin.qq.com/s/Zou7gGR9jq_tc8VnAGGpfg" target="_blank" rel="noopener">大数据是生产资料，人工智能是生产力，区块链就是生产关系</a>。如此来看，不管其发展趋势如何，区块链至少是值得我们去学习和了解的。区块链的核心价值在于建立去中心、去信任、不可篡改的分布式应用场景，愿景很美好，但目前该项技术的发展还处在探索的初级阶段，预计3-5年将会大规模增长，未来10年区块链市场将趋于成熟，在区块链时代来临之前，相关技术从业者应当提前做好知识储备，搭上即将来临的顺风车。在此总结了相关学习资料和知识体系图，而目前来看一位合格区块链研发工程师所具备的技术栈应当如下：<br><img src="http://upload-images.jianshu.io/upload_images/8926909-a01952194ba4601f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="区块链技术体系.jpg"></p><h3 id="一、比特币相关资源"><a href="#一、比特币相关资源" class="headerlink" title="一、比特币相关资源"></a>一、比特币相关资源</h3><p>1.<a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system" target="_blank" rel="noopener">《比特币白皮书》网址浏览</a><br>2.<a href="https://github.com/bitcoin/bitcoin" target="_blank" rel="noopener">【比特币源码下载】</a>，<a href="https://github.com/GammaGao/bitcoinwhitepaper" target="_blank" rel="noopener">《比特币白皮书下载》</a><br>3.<a href="http://8btc.com/topic-mastering-bitcoin.html" target="_blank" rel="noopener">《精通比特币》</a><br>讲比特币很详细的一本书，看完基本对比特币的认识就清楚了。<br>4.<a href="http://nakamotoinstitute.org/mempool/the-proof-of-work-concept/" target="_blank" rel="noopener">《TheProof-of-Work Concept》</a>PoW机制理论介绍，英文<br>5.<a href="http://blog.codinglabs.org/articles/bitcoin-mechanism-make-easy.html" target="_blank" rel="noopener">《比特币的原理及运作机制》</a>适合向圈外人介绍什么是比特币什么是区块链。<br>6.<a href="https://bbs.bumeng.cn/thread-815-1-1.html" target="_blank" rel="noopener">《比特币pow难度调节机制》</a>PoW的难度调节是一个要点，一篇简介</p><h3 id="二、区块链"><a href="#二、区块链" class="headerlink" title="二、区块链"></a>二、区块链</h3><p>1.<a href="https://yeasy.gitbooks.io/blockchain_guide/content/" target="_blank" rel="noopener">《区块链技术指南》</a>网页在线电子书，对区块链技术讲解得非常全面<br>2.<a href="http://lib.csdn.net/case/blockchain" target="_blank" rel="noopener">【csdn的blockchain知识库】</a><br>3.<a href="https://bbs.bumeng.cn/thread-849-1-1.html" target="_blank" rel="noopener">【区块链可应用场景】</a>应用场景探讨，布萌社区下的一篇帖子<br>4.<a href="http://wangxiaoming.com/" target="_blank" rel="noopener">【汪晓明对区块链、以太坊的思考】</a><br>汪晓明作为朝夕网络CEO，区块链技术的推广者和布道者，参与并制作了区块链视频节目<a href="https://v.qq.com/x/page/f0327r59q30.html" target="_blank" rel="noopener">《明说》</a>，向开源技术大牛学习。</p><h3 id="三、以太坊"><a href="#三、以太坊" class="headerlink" title="三、以太坊"></a>三、以太坊</h3><p>1.<a href="https://github.com/ethereum/wiki/wiki/White-Paper" target="_blank" rel="noopener">《以太坊白皮书英文版》</a><br>2.<a href="http://gavwood.com/paper.pdf" target="_blank" rel="noopener">《以太坊黄皮书》</a>介绍以太坊原理的论文，文长慎入<br>3.<a href="https://github.com/ethereum/wiki/wiki/FAQ" target="_blank" rel="noopener">【以太坊常见问题】</a>以上三篇都是外文资源<br>4.<a href="https://solidity.readthedocs.io/en/develop/" target="_blank" rel="noopener">【Solidity语言】</a>Solidity语言的文档，还是英文。极客学院翻译了一档勉强凑合的doc，<a href="http://wiki.jikexueyuan.com/project/solidity-zh/" target="_blank" rel="noopener">http://wiki.jikexueyuan.com/project/solidity-zh/</a><br>7.<a href="http://ethfans.org/posts/101-noob-intro" target="_blank" rel="noopener">《以太坊智能合约编程之菜鸟教程》</a>以太坊中文网站出的<br>8.<a href="https://bitshuo.com/topic/584241f863baf1df6cad0d40" target="_blank" rel="noopener">通过truffle部署以太坊智能合约</a><br>9.<a href="https://juejin.im/post/58f97521b123db41195481f3" target="_blank" rel="noopener">Truffle 3.0部署智能合约至Ethereum节点</a><br>10.<a href="http://wiki.jikexueyuan.com/project/blockchain/" target="_blank" rel="noopener">以太坊智能合约编写实例</a><br>11.<a href="http://blog.csdn.net/u013137970/article/details/53018423" target="_blank" rel="noopener">以太坊智能合约编写实例2</a><br>12.<a href="http://www.huiyanghua.com/article/plant/469/4707.html" target="_blank" rel="noopener">在CentOS6.5上搭建以太坊私有链</a></p><h3 id="四、Hyperledger-fabric"><a href="#四、Hyperledger-fabric" class="headerlink" title="四、Hyperledger fabric"></a>四、Hyperledger fabric</h3><p>1.<a href="https://zhuanlan.zhihu.com/p/25070745" target="_blank" rel="noopener">《Hyperledger Fabric V1.0– 开发者快速入门》</a>万达网络研究中心副总季宙栋写的开发者入门指南，这档知乎专栏可以订阅。<br>2.<a href="https://www.gitbook.com/book/yeasy/hyperledger_code_fabric/details" target="_blank" rel="noopener">【Hyperledger 源码分析之 Fabric】</a>源码分析，感兴趣研究的同学可以看看<br>3.<a href="http://blog.csdn.net/zhaoliang1131/article/details/54896276" target="_blank" rel="noopener">【Hyperledgerfablic 1.0 在centos7环境下的安装与部署和动态增加节点】</a>csdn上的一篇技术帖<br>4.<a href="https://hyperledger-fabric.readthedocs.io/en/latest/dev-setup/build.html" target="_blank" rel="noopener">【fabric源码搭建】</a>托管在github上的doc说明，纯英文。<br>5.<a href="http://www.8btc.com/hyperledger-fabric1-0" target="_blank" rel="noopener">《Hyperledger Fabric1.0架构概览》</a><br>6.<a href="https://github.com/hyperledger-archives/fabric/blob/master/docs/protocol-spec_zh.md" target="_blank" rel="noopener">《fabric中文文档》</a><br>7.<a href="https://g2ex.github.io/2016/10/14/Deploy-Hyperledger-Fabric-with-Docker/" target="_blank" rel="noopener">【Ubuntu中使用 Docker 部署 HyperledgerFabric】</a>学好docker很重要</p><h3 id="五、布萌"><a href="#五、布萌" class="headerlink" title="五、布萌"></a>五、布萌</h3><p>1.<a href="https://bbs.bumeng.cn/thread-851-1-1.html" target="_blank" rel="noopener">布萌接入指南</a><br>布萌官方的指南有些模糊，个人整理了一版出来仅供参考<br>2.<a href="https://www.bumeng.cn/document/API" target="_blank" rel="noopener">布萌API文档</a><br>3.<a href="https://www.bumeng.cn/document/SDK" target="_blank" rel="noopener">布萌SDK文档</a><br>两个官方文档，其实官网就有，顺手列在这了：D<br>4.<a href="https://bbs.bumeng.cn/thread-917-1-1.html" target="_blank" rel="noopener">布萌PHP SDK</a><br>今天看到有朋友放出的PHP的SDK，膜拜大神</p><h3 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h3><p>1.<a href="http://bitcoin-on-nodejs.ebookchain.org/" target="_blank" rel="noopener">《Nodejs开发加密货币》</a>基于Ebookcoin（亿书币）的开发教程，有一定参考价值<br>2.<a href="https://bitshuo.com/topic/5847b86b63baf1df6cad0d6f" target="_blank" rel="noopener">《创建自己的私有比特币测试链》</a>比特币私链搭建教程</p><p>最后还谈一下个人感想：现在百度搜一下区块链，培训市场的速成班广告已经占据了头条，计算了一下他们五个月左右的脱产培训班收费是2.5w上下，又是一波红利，而有些培训机构的课程体系，其实只是整合了过去的编程培训内容再添加一点区块链技术就算完事，简直一锅乱炖，这样的学习方式其实会害死人。相比商人的闻风而动，承担教育责任的大学校园却有点不作为，许多大学的计算机课程体系是远远落后的，大部分学生群体也对科技前沿和趋势动向不是很敏感，前些天看到了一篇钛媒体的报道<a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1517991779&amp;ver=683&amp;signature=OAYaOycdJz2ErS7650iVIRX5i-QqMOeRlhdQGJNjCnw8jF-ksRqUS0koKo4QMMWKvWg0sf0yL4IHPLHRLAJmAwqp8*HWRSFIdvlvbFAO2jZoqFsf4CM-Wg6XUjfStxxt&amp;new=1" target="_blank" rel="noopener">《中国学生狂“吃鸡”，美国学生猛“挖矿”》</a>，学习上的差距可见一斑，不论怎样，学习之事关乎己身，上士闻道勤而行之。</p><blockquote><p>后续将会不断补充相关学习体系，欢迎访问我的<a href="http://yitaicloud.com/" target="_blank" rel="noopener">博客站点【YitaiCloud】</a>。<br>部分资料参考了这篇<a href="http://blog.csdn.net/qq_35624642/article/details/78175907" target="_blank" rel="noopener">入门到放弃</a>，</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;仿佛一夜之间，互联网和金融圈都在谈论区块链，而区块链的发展无疑是借着数字货币之浪潮而起，而后被熟知、被认可到如今的大势所趋，目前科技与工业界的共识是区块链将会成为引领第四次工业革命的关键技术，回看2015年火爆的虚拟现实，2016年流行的大数据，2017年独领风骚的人工智能，2018年毫无疑问将会是区块链的元年，
    
    </summary>
    
      <category term="区块链" scheme="https://tisonkong.github.io/github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="blockChain" scheme="https://tisonkong.github.io/github.io/tags/blockChain/"/>
    
  </entry>
  
  <entry>
    <title>java基础之数据结构1</title>
    <link href="https://tisonkong.github.io/github.io/2018/02/07/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://tisonkong.github.io/github.io/2018/02/07/java基础之数据结构/</id>
    <published>2018-02-07T08:32:04.173Z</published>
    <updated>2018-02-07T08:32:04.175Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/8926909-080c94b2247e13cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="java集合框架图"><br><a id="more"></a></p><h4 id="一、基础类型-Primitives"><a href="#一、基础类型-Primitives" class="headerlink" title="一、基础类型(Primitives)"></a>一、基础类型(Primitives)</h4><h5 id="1-基础类型-Primitives-与封装类型-Wrappers-的区别在哪里？"><a href="#1-基础类型-Primitives-与封装类型-Wrappers-的区别在哪里？" class="headerlink" title="1.基础类型(Primitives)与封装类型(Wrappers)的区别在哪里？"></a>1.基础类型(Primitives)与封装类型(Wrappers)的区别在哪里？</h5><p><strong>1 传递方式不同</strong><br>封装类是引用类型。基本类型（原始数据类型）在传递参数时都是按值传递，而封装类型是按引用传递的(其实“引用也是按值传递的”，传递的是对象的地址)。由于包装类型都是final修饰的不可变量，因此没有提供改变它值的方法，增加了对“按引用传递”的理解难度。<br><code>int</code>是基本类型，直接存放数值；<code>Integer</code>是类，产生对象时用一个引用指向这个对象。<br><strong>2 封装类可以有方法和属性</strong><br>封装类可以有方法和属性，利用这些方法和属性来处理数据，如<code>Integer.parseInt(Strings)</code>。<strong>基本数据类型都是final修饰的</strong>，不能继承扩展新的类、新的方法。<br><strong>3 默认值不同</strong><br>基本类型跟封装类型的默认值是不一样的。如<code>int i</code>,<code>i</code>的预设为<code>0</code>；<code>Integer j</code>，<code>j</code>的预设为<code>null</code>,因为封装类产生的是对象，对象默认值为null。<br><strong>4 存储位置</strong><br>基本类型在内存中是存储在栈中，引用类型的引用（值的地址）存储在栈中，而实际的对象（值）是存在堆中。<br><strong>基本数据类型的好处就是速度快（不涉及到对象的构造和回收），封装类的目的主要是更好的处理数据之间的转换。</strong>JDK5.0开始可以自动封包了，<strong>基本数据类型可以自动封装成封装类</strong>。</p><blockquote><p><a href="http://blog.csdn.net/xzp_12345/article/details/79038251" target="_blank" rel="noopener">《 基础类型(Primitives)与封装类型(Wrappers)的区别》</a></p></blockquote><h5 id="2-简述九种基本数据类型的大小，以及他们的封装类。"><a href="#2-简述九种基本数据类型的大小，以及他们的封装类。" class="headerlink" title="2.简述九种基本数据类型的大小，以及他们的封装类。"></a>2.简述九种基本数据类型的大小，以及他们的封装类。</h5><p><img src="http://upload-images.jianshu.io/upload_images/8926909-6ff5f555b500eab8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="基本数据类型和包装类"></p><h5 id="3-int和-Integer-哪个会占用更多的内存？int和-Integer-有什么区别？parseInt-函数在什么时候使用到？"><a href="#3-int和-Integer-哪个会占用更多的内存？int和-Integer-有什么区别？parseInt-函数在什么时候使用到？" class="headerlink" title="3.int和 Integer 哪个会占用更多的内存？int和 Integer 有什么区别？parseInt()函数在什么时候使用到？"></a>3.int和 Integer 哪个会占用更多的内存？int和 Integer 有什么区别？parseInt()函数在什么时候使用到？</h5><p>当然是<code>Integer</code>会占用更多的内存。以下为<code>int</code>和<code>Integer</code>的区别：<br>1、<code>Integer</code>是<code>int</code>的包装类，<code>int</code>则是java的一种基本数据类型<br>2、<code>Integer</code>变量必须实例化后才能使用，而<code>int</code>变量不需要<br>3、<code>Integer</code>实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值<br>4、<code>Integer</code>的默认值是<code>null</code>，<code>int</code>的默认值是0<br>延伸关于Integer和int的比较 ：</p><ul><li><p>由于<code>Integer</code>变量实际上是对一个<code>Integer</code>对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">Integer j = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">System.out.print(i == j); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Integer</code>变量和<code>int</code>变量比较时，只要两个变量的值是向等的，则结果为true（因为包装类<code>Integer</code>和基本数据类型<code>int</code>比较时，java会自动拆包装为<code>int</code>，然后进行比较，实际上就变为两个int变量的比较）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">100</span>；</span><br><span class="line">System.out.print(i == j); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>非<code>new</code>生成的<code>Integer</code>变量和<code>new Integer()</code>生成的变量比较时，结果为<code>false</code>。（因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">Integer j = <span class="number">100</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>对于两个非<code>new</code>生成的<code>Integer</code>对象，进行比较时，如果两个变量的值在区间<code>-128</code>到<code>127</code>之间，则比较结果为<code>true</code>，如果两个变量的值不在此区间，则比较结果为<code>false</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">100</span>;</span><br><span class="line">Integer j = <span class="number">100</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//true</span></span><br><span class="line">Integer i = <span class="number">128</span>;</span><br><span class="line">Integer j = <span class="number">128</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ul><p>对于第4条的原因：<br>java在编译<code>Integer i = 100 ;</code>时，会翻译成为<code>Integer i = Integer.valueOf(100)；</code>，而java API中对<code>Integer</code>类型的<code>valueOf</code>的定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)&#123;</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>java对于<code>-128</code>到<code>127</code>之间的数，会进行缓存，<code>Integer i = 127</code>时，会将<code>127</code>进行缓存，下次再写<code>Integer j = 127</code>时，就会直接从缓存中取，就不会<code>new</code>了。</p><blockquote><p><a href="http://www.cnblogs.com/guodongdidi/p/6953217.html" target="_blank" rel="noopener">《int和Integer的区别》</a></p></blockquote><p><strong>parseInt()</strong><br><code>parseInt()</code>将把该字符之前的字符串转换成数字。<code>parseInt()</code>方法还有基模式，可以把二进制、八进制、十六进制或其他任何进制的字符串转换成整数。基是由<code>parseInt()</code>方法的第二个参数指定的，所以要解析十六进制的值，当然，对二进制、八进制，甚至十进制（默认模式），都可以这样调用<code>parseInt()</code>方法。<br>如果十进制数包含前导0，那么最好采用基数10，这样才不会意外地得到八进制的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s, <span class="keyword">int</span> radix)</span></span></span><br></pre></td></tr></table></figure></p><h5 id="4-如何去小数四舍五入保留小数点后两位？"><a href="#4-如何去小数四舍五入保留小数点后两位？" class="headerlink" title="4.如何去小数四舍五入保留小数点后两位？"></a>4.如何去小数四舍五入保留小数点后两位？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用银行家算法</span></span><br><span class="line">BigDecimal i = d.multiply(r).setScale(<span class="number">2</span>,RoundingMode.HALF_EVEN);</span><br></pre></td></tr></table></figure><p>推荐使用<code>BigDecimal</code> ，并且采用<code>setScale</code>方法来设置精确度，同时使用<code>RoundingMode.HALF_UP</code>表示使用最近数字舍入法则来近似计算。在这里我们可以看出<code>BigDecimal</code>和四舍五入是绝妙的搭配。<br><a href="http://www.cnblogs.com/chenssy/p/3366632.html" target="_blank" rel="noopener">《java提高篇(三)—–java的四舍五入》</a></p><h5 id="5-char-型变量中能不能存贮一个中文汉字，为什么？"><a href="#5-char-型变量中能不能存贮一个中文汉字，为什么？" class="headerlink" title="5.char 型变量中能不能存贮一个中文汉字，为什么？"></a>5.char 型变量中能不能存贮一个中文汉字，为什么？</h5><p><code>char</code>型变量是用来存储<code>Unicode</code>编码的字符的，<code>unicode</code>编码字符集中包含了汉字，所以<code>char</code>型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在<code>unicode</code>编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充<br>说明：<code>unicode</code>编码占用两个字节，所以，<code>char</code>类型的变量也是占用两个字节。</p><h4 id="二、类型转换"><a href="#二、类型转换" class="headerlink" title="二、类型转换"></a>二、类型转换</h4><h5 id="1-怎样将-bytes-转换为-long-类型"><a href="#1-怎样将-bytes-转换为-long-类型" class="headerlink" title="1.怎样将 bytes 转换为 long 类型"></a>1.怎样将 bytes 转换为 long 类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">bytes2long</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++) &#123;</span><br><span class="line">        res &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">        temp = b[i] &amp; <span class="number">0xff</span>;</span><br><span class="line">        res |= temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-怎么将-byte-转换为-String"><a href="#2-怎么将-byte-转换为-String" class="headerlink" title="2.怎么将 byte 转换为 String**"></a>2.怎么将 byte 转换为 String**</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//string 转成 byte</span></span><br><span class="line">string s = <span class="string">"Hello!!"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">b = System.Text.Encoding.ASCII.GetBytes(s);</span><br><span class="line"><span class="comment">//当string含有中文字符时用 System.Text.Encoding.UTF8.GetBytes(s);</span></span><br><span class="line">sock.Send(b);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//byte 转成 string</span></span><br><span class="line"><span class="keyword">byte</span>[] b1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">2</span>];</span><br><span class="line">sock.Receive(b1);</span><br><span class="line">string s1 = System.Text.Encoding.ASCII.GetString(b1);</span><br><span class="line"><span class="comment">// System.Text.Encoding.UTF8.GetString(b1);</span></span><br></pre></td></tr></table></figure><p>注意： 在把<code>byte</code>数组转换成<code>string</code>的时候，由于<code>byte</code>数组有2M的字节，所以转换后得到的字符串s1也会填充到2M的字符（用\0来填充）<br>所以，为了避免这个问题，可以使用<code>Receive</code>返回的字节数来确定接收到byte的长度<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> length = sock.Receive(b1);</span><br><span class="line">string s1 = System.Text.Encoding.ASCII.GetString(b1, <span class="number">0</span>, length);</span><br><span class="line"><span class="comment">//这样，s1就为byte实际的值</span></span><br></pre></td></tr></table></figure></p><h5 id="3-如何将数值型字符转换为数字"><a href="#3-如何将数值型字符转换为数字" class="headerlink" title="3.如何将数值型字符转换为数字"></a>3.如何将数值型字符转换为数字</h5><p><code>string</code>和<code>int</code>之间的转换</p><ul><li><code>string</code>转换成<code>int</code>  : <code>Integer.valueOf(&quot;12&quot;)</code></li><li><code>int</code>转换成<code>string</code> : <code>String.valueOf(12)</code></li></ul><p><code>char</code>转<code>int</code>之间的转换</p><ul><li>首先将char转换成string<br><code>String str=String.valueOf(&#39;2&#39;)</code><br><code>Integer.valueof(str)</code> 或者<code>Integer.PaseInt(str)</code><br>Integer.valueof返回的是Integer对象，Integer.paseInt返回的是int</li></ul><h5 id="4-我们能将-int-强制转换为-byte-类型的变量吗？如果该值大于-byte-类型的范围，将会出现什么现象"><a href="#4-我们能将-int-强制转换为-byte-类型的变量吗？如果该值大于-byte-类型的范围，将会出现什么现象" class="headerlink" title="4.我们能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象"></a>4.我们能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象</h5><p><code>Byte</code>转<code>int</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bytes2int</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = bytes[<span class="number">0</span>] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        num |= ((bytes[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>);</span><br><span class="line">        num |= ((bytes[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) &amp; <span class="number">0xFF0000</span>);</span><br><span class="line">        num |= ((bytes[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) &amp; <span class="number">0xFF000000</span>);</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>int</code>转 <code>byte</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] int2bytes(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">        b[<span class="number">0</span>] = (<span class="keyword">byte</span>) (<span class="number">0xff</span>&amp;i);</span><br><span class="line">        b[<span class="number">1</span>] = (<span class="keyword">byte</span>) ((<span class="number">0xff00</span>&amp;i) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">        b[<span class="number">2</span>] = (<span class="keyword">byte</span>) ((<span class="number">0xff0000</span>&amp;i) &gt;&gt; <span class="number">16</span>);</span><br><span class="line">        b[<span class="number">3</span>] = (<span class="keyword">byte</span>) ((<span class="number">0xff000000</span>&amp;i) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="5-能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗"><a href="#5-能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗" class="headerlink" title="5.能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗?"></a>5.能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗?</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">88.88</span>;</span><br><span class="line">    <span class="keyword">long</span> l = Math.round(d);</span><br><span class="line">    System.out.println(l);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> ll = <span class="number">100L</span>;</span><br><span class="line">    <span class="keyword">double</span> dd = (<span class="keyword">double</span>) ll;</span><br><span class="line">    System.out.println(dd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-类型向下转换是什么"><a href="#6-类型向下转换是什么" class="headerlink" title="6.类型向下转换是什么?"></a>6.类型向下转换是什么?</h5><p>由低层次类型转换为高层次类型称为向上类型转换。向上类型转换是自动进行的，比如把int型变量赋给为long型变量，把long型变量赋给double型变量，转换都是自动进行的。由派生类转换为基类也是向上提升，也是自动进行的，但转换后，基类的引用符不能应用派生类对象特有的函数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Human  jean = <span class="keyword">new</span> Human();</span><br><span class="line">Vervebrata   someone = jean;</span><br><span class="line">some.Work();</span><br></pre></td></tr></table></figure></p><p>运行上面语句会出错，虽然<code>someone</code>指向了一个<code>Human</code>类的对象，但是它不能调用<code>Work()</code>函数，因为<code>someone</code>的类型为<code>Vertebrata</code>，而基类<code>Vertebrata</code>中没有申明<code>Work()</code>函数。要想通过基类引用符someone调用派生类特有的函数，必须将<code>someone</code>的类型强制转换为派生类。这种由基类向派生类转换的过程称为向下类型转换。</p><h4 id="三、-数组"><a href="#三、-数组" class="headerlink" title="三、 数组"></a>三、 数组</h4><h5 id="1-如何权衡是使用无序的数组还是有序的数组"><a href="#1-如何权衡是使用无序的数组还是有序的数组" class="headerlink" title="1.如何权衡是使用无序的数组还是有序的数组"></a>1.如何权衡是使用无序的数组还是有序的数组</h5><p>在数据偏向查找操作的时候用有序数组快一些，在数据偏向插入的时候，无序数组好一些。删除操作效率一样。</p><h5 id="2-怎么判断数组是-null-还是为空"><a href="#2-怎么判断数组是-null-还是为空" class="headerlink" title="2.怎么判断数组是 null 还是为空"></a>2.怎么判断数组是 null 还是为空</h5><p>（无论使用哪种类型的数组，数组标识符其实只是一个引用，指向在堆中创建的一个真实对象 <code>Int[] A =new int[10];</code>new 一下就是实例化了，开辟了内存空间，基本数据类型的元素会被赋初始值，数组建立后长度不能改变，但是还是可以重新赋值）<br>有如下两个变量定义：</p><ul><li>1 <code>int[] zero = new int[0];</code></li><li>2 <code>int[] nil = null;</code><br>这两种定义有什么区别呢？<br>zero是一个长度为0的数组，我们称之为“空数组”，空数组也是一个对象，只是包含元素个数为0。nil是一个数组类型的空引用。</li></ul><h5 id="3-怎么打印数组？-怎样打印数组中的重复元素"><a href="#3-怎么打印数组？-怎样打印数组中的重复元素" class="headerlink" title="3.怎么打印数组？ 怎样打印数组中的重复元素"></a>3.怎么打印数组？ 怎样打印数组中的重复元素</h5><h5 id="4-Array-和-ArrayList有什么区别？什么时候应该使用Array而不是ArrayList"><a href="#4-Array-和-ArrayList有什么区别？什么时候应该使用Array而不是ArrayList" class="headerlink" title="4.Array 和 ArrayList有什么区别？什么时候应该使用Array而不是ArrayList?"></a>4.Array 和 ArrayList有什么区别？什么时候应该使用Array而不是ArrayList?</h5><p><strong>1）</strong>精辟阐述：<br>可以将 <code>ArrayList</code>想象成一种“会自动扩增容量的<code>Array</code>”。<br><strong>2）</strong><code>Array（[]）</code>：最高效；但是其容量固定且无法动态改变；<br>      <code>ArrayList</code>：  容量可动态增长；但牺牲效率；<br><strong>3）</strong>建议：<br>基于效率和类型检验，应尽可能使用Array，无法确定数组大小时才使用ArrayList！<br>不过当你试着解决更一般化的问题时，Array的功能就可能过于受限。<br><strong>4）</strong>Java中一切皆对象，Array也是对象。不论你所使用得Array型别为何，Array名称本身实际上是个reference，指向heap之内得某个实际对象。这个对象可经由“Array初始化语法”被自动产生，也可以以new表达式手动产生。<br><strong>5）</strong>Array可做为函数返回值，因为它本身是对象的reference；<br><strong>6）</strong>对象数组与基本类型数组在运用上几乎一模一样，唯一差别在于，前者持有得是<code>reference</code>，后者直接持有基本型别之值；<br>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string [] staff=<span class="keyword">new</span> string[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> [] num=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></p><p><strong>7）</strong>容器所持有的其实是一个<code>reference</code>指向<code>Object</code>，进而才能存储任意型别。当然这不包括基本型别，因为基本型别并不继承自任何<code>classes</code>。<br><strong>8）</strong>面对<code>Array</code>，我们可以直接持有基本型别数值的<code>Array</code>（例如：<code>int [] num;</code>),也可以持有<code>reference</code>（指向对象）的<code>Array</code>；但是容器类仅能持有<code>reference</code>（指向对象），若要将基本型别置于容器内，需要使用<code>wrapper</code>类。但是<code>wrapper</code>类使用起来可能不很容易上手，此外，<code>primitives Array</code>的效率比起“容纳基本型别之外覆类（的<code>reference</code>）”的容器好太多了。<br>当然，如果你的操作对象是基本型别，而且需要在空间不足时自动扩增容量，<code>Array</code>便不适合，此时就得使用外覆类的容器了。<br><strong>9）</strong>某些情况下，容器类即使没有转型至原来的型别，仍然可以运作无误。有一种情况尤其特别：编译器对String class提供了一些额外的支持，使它可以平滑运作。<br><strong>10）</strong>对数组的一些基本操作，像排序、搜索与比较等是很常见的。因此在Java中提供了<code>Arrays</code>类协助这几个操作：<code>sort(),binarySearch(),equals(),fill(),asList().</code><br>不过<code>Arrays</code>类没有提供删除方法，而ArrayList中有remove()方法，不知道是否是不需要在<code>Array</code>中做删除等操作的原因（因为此时应该使用链表）。<br><strong>11）</strong>ArrayList的使用也很简单：产生<code>ArrayList</code>，利用<code>add()</code>将对象置入，利用get(i）配合索引值将它们取出。这一切就和Array的使用方式完全相同，只不过少了[]而已。</p><p><strong>换一种简单说法：</strong><br><strong>1）效率：</strong><br>数组扩容是对<code>ArrayList</code>效率影响比较大的一个因素。<br>每当执行<code>Add、AddRange、Insert、InsertRange</code>等添加元素的方法，都会检查内部数组的容量是否不够了，如果是，它就会以当前容量的两倍来重新构建一个数组，将旧元素Copy到新数组中，然后丢弃旧数组，在这个临界点的扩容操作，应该来说是比较影响效率的。<br><code>ArrayList</code>是<code>Array</code>的复杂版本<br><code>ArrayList</code>内部封装了一个<code>Object</code>类型的数组，从一般的意义来说，它和数组没有本质的差别，甚至于ArrayList的许多方法，如<code>Index、IndexOf、Contains、Sort</code>等都是在内部数组的基础上直接调用<code>Array</code>的对应方法。<br><strong>2）类型识别：</strong><br><code>ArrayList</code>存入对象时，抛弃类型信息，所有对象屏蔽为<code>Object</code>，编译时不检查类型，但是运行时会报错。但是现在有jdk1.5后引入泛型来进行编译检查类型，如错存入了不同类型会直接报错。<br><code>ArrayList</code>与数组的区别主要就是由于动态增容的效率问题了<br><strong>3）<code>ArrayList</code>可以存任何<code>Object</code>，如<code>String</code>等。</strong></p><h5 id="5-数组和链表数据结构描述，各自的时间复杂度"><a href="#5-数组和链表数据结构描述，各自的时间复杂度" class="headerlink" title="5.数组和链表数据结构描述，各自的时间复杂度"></a>5.数组和链表数据结构描述，各自的时间复杂度</h5><p><strong>数组</strong>是将元素在内存中连续存放，由于每个元素占用内存相同，可以通过下标迅速访问数组中任何元素。但是如果要在数组中增加一个元素，需要移动大量元素，在内存中空出一个元素的空间，然后将要增加的元素放在其中。同样的道理，如果想删除一个元素，同样需要移动大量元素去填掉被移动的元素。如果应用需要快速访问数据，很少插入和删除元素，就应该用数组。<br><strong>链表</strong>中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起，每个结点包括两个部分：一个是存储 数据元素的数据域，另一个是存储下一个结点地址的 指针。 如果要访问链表中一个元素，需要从第一个元素开始，一直找到需要的元素位置。但是增加和删除一个元素对于链表数据结构就非常简单了，只要修改元素中的指针就可以了。如果应用需要经常插入和删除元素你就需要用链表。</p><ul><li>内存存储区别<br>数组从栈中分配空间, 对于程序员方便快速,但自由度小。链表从堆中分配空间, 自由度大但申请管理比较麻烦.　</li><li>逻辑结构区别<br>数组必须事先定义固定的长度（元素个数），不能适应数据动态地增减的情况。当数据增加时，可能超出原先定义的元素个数；当数据减少时，造成内存浪费。　<br>链表动态地进行存储分配，可以适应数据动态地增减的情况，且可以方便地插入、删除数据项。（数组中插入、删除数据项时，需要移动其它数据项）　</li></ul><p>总结<br>1、存取方式上，数组可以顺序存取或者随机存取，而链表只能顺序存取；　<br>2、存储位置上，数组逻辑上相邻的元素在物理存储位置上也相邻，而链表不一定；　<br>3、存储空间上，链表由于带有指针域，存储密度不如数组大；　<br>4、按序号查找时，数组可以随机访问，时间复杂度为O(1)，而链表不支持随机访问，平均需要O(n)；　<br>5、按值查找时，若数组无序，数组和链表时间复杂度均为O(1)，但是当数组有序时，可以采用折半查找将时间复杂度降为O(logn)；　<br>6、插入和删除时，数组平均需要移动n/2个元素，而链表只需修改指针即可；　<br>7、空间分配方面：<br>数组在静态存储分配情形下，存储元素数量受限制，动态存储分配情形下，虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低，而且如果内存中没有更大块连续存储空间将导致分配失败；<br>链表存储的节点空间只在需要的时候申请分配，只要内存中有空间就可以分配，操作比较灵活高效；<br>数组有没有length()这个方法? String有没有length()这个方法</p><h4 id="四、队列"><a href="#四、队列" class="headerlink" title="四、队列"></a>四、队列</h4><h5 id="1-队列和栈是什么，列出它们的区别"><a href="#1-队列和栈是什么，列出它们的区别" class="headerlink" title="1.队列和栈是什么，列出它们的区别"></a>1.队列和栈是什么，列出它们的区别</h5><p><strong>队列（Queue）</strong>：是限定只能在表的一端进行插入和在另一端进行删除操作的线性表；<br><strong>栈（Stack）</strong>：是限定只能在表的一端进行插入和删除操作的线性表。<br>区别如下：</p><ul><li><p>规则不同</p><pre><code>1. 队列：先进先出（First In First Out）FIFO2. 栈：先进后出（First In Last Out ）FILO</code></pre></li><li><p>对插入和删除操作的限定不同</p><pre><code>1. 队列：只能在表的一端进行插入，并在表的另一端进行删除；2. 栈：只能在表的一端插入和删除。</code></pre></li><li><p>遍历数据速度不同</p><pre><code>1. 队列：基于地址指针进行遍历，而且可以从头部或者尾部进行遍历，但不能同时遍历，无需开辟空间，因为在遍历的过程中不影响数据结构，所以遍历速度要快；2. 栈：只能从顶部取数据，也就是说最先进入栈底的，需要遍历整个栈才能取出来，而且在遍历数据的同时需要为数据开辟临时空间，保持数据在遍历前的一致性。</code></pre></li></ul><h5 id="2-BlockingQueue是什么"><a href="#2-BlockingQueue是什么" class="headerlink" title="2.BlockingQueue是什么"></a>2.BlockingQueue是什么</h5><p> 阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。</p><blockquote><p><a href="http://www.importnew.com/17537.html" target="_blank" rel="noopener">《聊聊并发（7）Java中的阻塞队列》</a></p></blockquote><h5 id="3-简述-ConcurrentLinkedQueue-LinkedBlockingQueue-的用处和不同之处。"><a href="#3-简述-ConcurrentLinkedQueue-LinkedBlockingQueue-的用处和不同之处。" class="headerlink" title="3.简述 ConcurrentLinkedQueue LinkedBlockingQueue 的用处和不同之处。"></a>3.简述 ConcurrentLinkedQueue LinkedBlockingQueue 的用处和不同之处。</h5><ul><li><strong>阻塞队列：线程安全</strong><br>按 FIFO（先进先出）排序元素。队列的头部是在队列中时间最长的元素。队列的尾部是在队列中时间最短的元素。新元素插入到队列的尾部，并且队列检索操作会获得位于队列头部的元素。链接队列的吞吐量通常要高于基于数组的队列，但是在大多数并发应用程序中，其可预知的性能要低。<br>注意：<br>1、必须要使用take()方法在获取的时候达成阻塞结果<br>2、使用<code>poll()</code>方法将产生非阻塞效果</li><li>非阻塞队列<br>基于链接节点的、无界的、线程安全。此队列按照 FIFO（先进先出）原则对元素进行排序。队列的头部 是队列中时间最长的元素。队列的尾部 是队列中时间最短的元素。新的元素插入到队列的尾部，队列检索操作从队列头部获得元素。当许多线程共享访问一个公共 <code>collection</code> 时，<code>ConcurrentLinkedQueue</code>是一个恰当的选择。此队列不允许 null 元素。</li></ul><p>在并发编程中，一般推荐使用阻塞队列，这样实现可以尽量地避免程序出现意外的错误。阻塞队列使用最经典的场景就是socket客户端数据的读取和解析，读取数据的线程不断将数据放入队列，然后解析线程不断从队列取数据解析。还有其他类似的场景，只要符合生产者-消费者模型的都可以使用阻塞队列。<br>使用非阻塞队列，虽然能即时返回结果（消费结果），但必须自行编码解决返回为空的情况处理（以及消费重试等问题）。另外他们都是线程安全的，不用考虑线程同步问题。</p><blockquote><p><a href="http://www.cnblogs.com/starcrm/p/4998067.html" target="_blank" rel="noopener">《JAVA阻塞队列以及非阻塞队列的区别》</a></p></blockquote><h5 id="4-ArrayList、Vector、LinkedList的存储性能和特性"><a href="#4-ArrayList、Vector、LinkedList的存储性能和特性" class="headerlink" title="4.ArrayList、Vector、LinkedList的存储性能和特性"></a>4.ArrayList、Vector、LinkedList的存储性能和特性</h5><p><code>ArrayList</code> 和<code>Vector</code>他们底层的实现都是一样的，都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢。</p><p><code>Vector</code>中的方法由于添加了<code>synchronized</code>修饰，因此<code>Vector</code>是线程安全的容器，但性能上较<code>ArrayList</code>差，因此已经是Java中的遗留容器。</p><p><code>LinkedList</code>使用双向链表实现存储（将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索引的线性结构，这种链式存储方式与数组的连续存储方式相比，内存的利用率更高），按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。</p><p><code>Vector</code>属于遗留容器（Java早期的版本中提供的容器，除此之外，<code>Hashtable、Dictionary、BitSet、Stack、Properties</code>都是遗留容器），已经不推荐使用，但是由于ArrayList和LinkedListed都是非线程安全的，如果遇到多个线程操作同一个容器的场景，则可以通过工具类<code>Collections</code>中的<code>synchronized List</code>方法将其转换成线程安全的容器后再使用（这是对装潢模式的应用，将已有对象传入另一个类的构造器中创建新的对象来增强实现）。</p><h4 id="五、String"><a href="#五、String" class="headerlink" title="五、String"></a>五、String</h4><h5 id="1-ByteBuffer-与-StringBuffer有什么区别"><a href="#1-ByteBuffer-与-StringBuffer有什么区别" class="headerlink" title="1.ByteBuffer 与 StringBuffer有什么区别"></a>1.ByteBuffer 与 StringBuffer有什么区别</h5><h4 id="六、Collections"><a href="#六、Collections" class="headerlink" title="六、Collections"></a>六、Collections</h4><h5 id="1-介绍Java中的Collection-FrameWork。集合类框架的基本接口有哪些？"><a href="#1-介绍Java中的Collection-FrameWork。集合类框架的基本接口有哪些？" class="headerlink" title="1.介绍Java中的Collection FrameWork。集合类框架的基本接口有哪些？"></a>1.介绍Java中的Collection FrameWork。集合类框架的基本接口有哪些？</h5><p>总共有两大接口：<code>Collection</code> 和<code>Map</code> ，一个元素集合，一个是键值对集合；</p><ul><li>其中<code>List</code>和<code>Set</code>接口继承了<code>Collection</code>接口，一个是有序元素集合，一个是无序元素集合；</li><li><code>ArrayList</code>和<code>LinkedList</code>实现了<code>List</code>接口，<code>HashSet</code>实现了<code>Set</code>接口，这几个都比较常用；</li><li><code>HashMap</code>和<code>HashTable</code>实现了<code>Map</code>接口，并且<code>HashTable</code>是线程安全的，但是<code>HashMap</code>性能更好；</li></ul><h5 id="2-Collections类是什么？Collection-和-Collections的区别？Collection、Map的实现"><a href="#2-Collections类是什么？Collection-和-Collections的区别？Collection、Map的实现" class="headerlink" title="2.Collections类是什么？Collection 和 Collections的区别？Collection、Map的实现."></a>2.Collections类是什么？Collection 和 Collections的区别？Collection、Map的实现.</h5><p><code>Collection</code>是单列集合</p><ul><li><p><code>List</code>元素是有序的、可重复。有序的<code>collection</code>，可以对列表中每个元素的插入位置进行精确地控制。可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。 可存放重复元素，元素存取是有序的。</p><ul><li><code>List</code>接口中常用类<br><code>Vector</code>：线程安全，但速度慢，已被ArrayList替代。底层数据结构是数组结构；<br><code>ArrayList</code>：线程不安全，查询速度快。底层数据结构是数组结构；<br><code>LinkedList</code>：线程不安全。增删速度快。底层数据结构是列表结构；</li></ul></li><li><p><code>Set</code>(集) 元素无序的、不可重复。取出元素的方法只有迭代器。不可以存放重复元素，元素存取是无序的。</p><ul><li><code>Set</code>接口中常用的类<br><code>HashSet</code>：线程不安全，存取速度快。它是如何保证元素唯一性的呢？依赖的是元素的<code>hashCode</code>方法和<code>euqals</code>方法。<br><code>TreeSet</code>：线程不安全，可以对<code>Set</code>集合中的元素进行排序。它的排序是如何进行的呢？通过<code>compareTo</code>或者<code>compare</code>方法中的来保证元素的唯一性。元素是以二叉树的形式存放的。</li></ul></li></ul><p><code>Map</code> 是一个双列集合</p><ul><li><code>Hashtable</code>:线程安全，速度快。底层是哈希表数据结构。是同步的。不允许null作为键，null作为值。</li><li><code>Properties</code>:用于配置文件的定义和操作，使用频率非常高，同时键和值都是字符串。是集合中可以和IO技术相结合的对象。</li><li><code>HashMap</code>:线程不安全，速度慢。底层也是哈希表数据结构。是不同步的。允许null作为键，null作为值。替代了Hashtable.</li><li><code>LinkedHashMap</code>: 可以保证<code>HashMap</code>集合有序。存入的顺序和取出的顺序一致。</li><li><code>TreeMap</code>：可以用来对<code>Map</code>集合中的键进行排序.</li></ul><p><code>Collection</code>是集合类的上级接口，子接口主要有Set 和List。<br><code>Collections</code>是针对集合类的一个帮助类，提供了操作集合的工具方法：一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。</p><blockquote><p><a href="http://www.cnblogs.com/jinlinFighting/p/5713356.html" target="_blank" rel="noopener">《介绍Collection框架的结构；Collection 和 Collections的区别》</a></p></blockquote><h5 id="3-集合类框架的最佳实践有哪些"><a href="#3-集合类框架的最佳实践有哪些" class="headerlink" title="3.集合类框架的最佳实践有哪些"></a>3.集合类框架的最佳实践有哪些</h5><p>根据应用的需要合理的选择集合的类型对性能非常重要</p><ol><li>假如元素的大小是固定的，而且能事先知道，我们就该用Array而不是ArrayList.</li><li>有些集合类允许指定初始容量。因此，如果我们能估计出存储元素的数目，我们可以设置初始容量来避免重新计算hash值或者扩容.</li><li>为了类型安全，可读性和健壮性的原因总要使用翻新。同时，使用泛型还能皮面运行时的<code>ClassCastException</code>.</li><li>使用JDK提供的不变类（<code>immutable class</code>）作为<code>Map</code>的键可以避免为我们自己的类实现<code>hashCode()</code>和<code>equals()</code>方法。</li><li>编程的时候接口优于实现。</li><li>底层的集合实际上是空的情况下返回长度是0的集合或者是数组，不要返回null.</li></ol><h5 id="4-为什么-Collection-不从-Cloneable-和-Serializable-接口继承"><a href="#4-为什么-Collection-不从-Cloneable-和-Serializable-接口继承" class="headerlink" title="4.为什么 Collection 不从 Cloneable 和 Serializable 接口继承?"></a>4.为什么 Collection 不从 Cloneable 和 Serializable 接口继承?</h5><p><code>Collection</code>接口指定一组对象，对象即为它的元素。如何维护这些元素由<code>Collection</code>的具体实现决定。例如，一些如<code>List</code>的<code>Collection</code>实现允许重复的元素，而其它的如<code>Set</code>就不允许。很多<code>Collection</code>实现有一个公有的<code>clone</code>方法。然而，把它放到集合的所有实现中也是没有意义的。这是因为<code>Collection</code>是一个抽象表现。<br>重要的是实现，克隆（cloning）或者序列化（serialization）的语义和含义是跟具体的实现相关的。因此应该由<strong>集合类的具体实现类来决定如何被克隆或者序列化</strong>。</p><h5 id="5-说出几点-Java-中使用-Collections-的最佳实践？"><a href="#5-说出几点-Java-中使用-Collections-的最佳实践？" class="headerlink" title="5.说出几点 Java 中使用 Collections 的最佳实践？"></a>5.说出几点 Java 中使用 Collections 的最佳实践？</h5><p>a）使用正确的集合类，例如，如果不需要同步列表，使用 <code>ArrayList</code> 而不是 <code>Vector</code>。<br>b）优先使用并发集合，而不是对集合进行同步。并发集合提供更好的可扩展性。<br>c）使用接口代表和访问集合，如使用<code>List</code>存储 <code>ArrayList</code>，使用 <code>Map</code> 存储 <code>HashMap</code> 等等。<br>d）使用迭代器来循环集合。<br>e）使用集合的时候使用泛型</p><h5 id="6-Collections-中-遗留类-HashTable、Vector-和-现有类的区别"><a href="#6-Collections-中-遗留类-HashTable、Vector-和-现有类的区别" class="headerlink" title="6.Collections 中 遗留类 (HashTable、Vector) 和 现有类的区别"></a>6.Collections 中 遗留类 (HashTable、Vector) 和 现有类的区别</h5><h5 id="7-什么是-B-树，B-树，列出实际的使用场景。"><a href="#7-什么是-B-树，B-树，列出实际的使用场景。" class="headerlink" title="7.什么是 B+树，B-树，列出实际的使用场景。"></a>7.什么是 B+树，B-树，列出实际的使用场景。</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8926909-080c94b2247e13cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;java集合框架图&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://tisonkong.github.io/github.io/categories/Java/"/>
    
    
      <category term="Interview" scheme="https://tisonkong.github.io/github.io/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>java基础之关键字和操作符</title>
    <link href="https://tisonkong.github.io/github.io/2018/02/04/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://tisonkong.github.io/github.io/2018/02/04/java基础之关键字和操作符/</id>
    <published>2018-02-04T02:08:11.044Z</published>
    <updated>2018-02-04T02:08:11.044Z</updated>
    
    <content type="html"><![CDATA[<h4 id="final-finalize-finally关键字"><a href="#final-finalize-finally关键字" class="headerlink" title="final,finalize,finally关键字"></a>final,finalize,finally关键字</h4><h5 id="1-finalize和final关键字"><a href="#1-finalize和final关键字" class="headerlink" title="1.finalize和final关键字"></a>1.finalize和final关键字</h5><p><strong>什么是finalize()方法？finalize()方法什么时候被调用？</strong><br>答： Java允许在类中定义一个名为<code>finalize()</code>的方法，一旦垃圾回收器准备好释放对象占用的存储空间，将首先调用<code>finalize()</code>方法，并且在下一次垃圾回收动作发生时，才会真正回收对象占用的内存。</p><p><strong>析构函数(finalization)的目的是什么</strong><br>析构函数目的是撤销对象前、完成一些清理工作，比如释放资源。释放了之后这些资源可以被回收，重新利用。<br><a id="more"></a></p><p><strong>final关键字有哪些用法</strong><br>final关键字主要用于修饰类、类成员、方法、以及方法的形参。</p><ul><li>final修饰成员属性：说明该成员属性是常量，不能被修改；</li><li>final修饰类，该类是最终类，不能被继承。</li><li>final修饰方法：该方法是最终方法，不能被重写。</li><li>final关键字修饰形参：1：当形参被修饰为final,那么该形参所属的方法中不能被篡改。</li></ul><h5 id="2-final-与-static-关键字可以用于哪里？它们的作用是什么？"><a href="#2-final-与-static-关键字可以用于哪里？它们的作用是什么？" class="headerlink" title="2. final 与 static 关键字可以用于哪里？它们的作用是什么？"></a>2. final 与 static 关键字可以用于哪里？它们的作用是什么？</h5><p>用于修饰成员变量和成员方法，可以理解为“全局常量”，对于变量表示一旦给定值就不可以修改，并且通过类名可以访问；对于方法表示不可覆盖，并且可以通过类名直接访问</p><h5 id="3-final-finally-finalize的区别（或者说final、finalize-和-finally-的不同之处？）"><a href="#3-final-finally-finalize的区别（或者说final、finalize-和-finally-的不同之处？）" class="headerlink" title="3. final, finally, finalize的区别（或者说final、finalize 和 finally 的不同之处？）**"></a>3. final, finally, finalize的区别（或者说final、finalize 和 finally 的不同之处？）**</h5><p>final关键字可以用于类，方法，变量前，用来表示该关键字修饰的类，方法，变量具有不可变的特性。</p><ul><li>final关键字用于基本数据类型前：这时表明该关键字修饰的变量是一个常量，在定义后该变量的值就不能被修改。</li><li>final关键字用于方法声明前：这时意味着该方法时最终方法，只能被调用，不能被覆盖，但是可以被重载。</li><li>final关键字用于类名前：此时该类被称为最终类，该类不能被其他类继承。</li></ul><p><strong><code>finalize()</code></strong>方法来自于<code>java.lang.Object</code>，用于回收资源。可以为任何一个类添加finalize方法。finalize方法将在垃圾回收器清除对象之前调用。在实际应用中，<strong>不要依赖使用该方法回收任何短缺的资源，这是因为很难知道这个方法什么时候被调用</strong>。<br><strong>finally</strong>，当代码抛出一个异常时，就会终止方法中剩余代码的处理，并退出这个方法的执行。finally块是程序在正常情况下或异常情况下都会运行的。比较适合用于既要处理异常又有资源释放的代码，保证了资源的合理回收。</p><h5 id="4-能否在运行时向-static-final-类型的赋值"><a href="#4-能否在运行时向-static-final-类型的赋值" class="headerlink" title="4. 能否在运行时向 static  final 类型的赋值"></a>4. 能否在运行时向 static  final 类型的赋值</h5><p>不可以，被<code>static final</code>修饰的变量只能在被定义的时候或者类的静态代码块中初始化，一旦赋值后就不能在改变了。<code>static final</code>相当于类常量，就是在类被加载进内存的时候就要为属性分配内存，<code>static</code>块就是类被加载的时候执行且被执行一次，所以可以在其中进行初始化。</p><h5 id="5-使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变"><a href="#5-使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变" class="headerlink" title="5. 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变?"></a>5. 使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变?</h5><p>是引用不能变（final引用恒定不变），引用的对象内容还是可以变的</p><h5 id="8-throws-throw分别代表什么意义"><a href="#8-throws-throw分别代表什么意义" class="headerlink" title="8. throws, throw分别代表什么意义?"></a>8. throws, throw分别代表什么意义?</h5><p><code>throw</code>是指的语句抛出一个异常，<code>throws</code>指的是声明方法可能抛出的异常类型</p><p><strong>9、Java 有几种修饰符？分别用来修饰什么</strong><br><strong>类的修饰符：</strong></p><ul><li><code>public</code>可以在其他任何类中使用，默认为统一包下的任意类。</li><li><code>abstract</code>抽象类，不能被实例化，可以包含抽象方法，抽象方法没有被实现，无具体功能，只能衍生子类。</li><li><code>final</code>不能被继承。</li></ul><p><strong>成员变量</strong></p><ul><li><p>访问修饰符：<br><img src="http://upload-images.jianshu.io/upload_images/8926909-16902c873e4ed9d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="访问修饰符"></p></li><li><p><code>static</code>类变量：一个类所拥有的变量，不是类的每个实例有的变量。类变量是指不管类创建了多少对象，系统仅在第一次调用类的时候为类变量分配内存，所有对象共享该类的类变量，因此可以通过类本身或者某个对象来访问类变量。</p></li><li><code>final</code>：常量。</li><li><code>volatile</code>：声明一个可能同时被并存运行的几个线程所控制和修改的变量。</li><li><code>abstract</code>：只有声明部分，方法体为空，具体在子类中完成。</li><li><code>transient</code>：（过度修饰符）指定该变量是系统保留，暂无特别作用的临时性变量。</li></ul><p><strong>方法修饰符：</strong></p><ul><li>访问修饰符<br><code>public</code>（公共控制符）<br><code>private</code>（私有控制符）指定此方法只能有自己类等方法访问，其他的类不能访问（包括子类）<br><code>protected</code>（保护访问控制符）指定该方法可以被它的类和子类进行访问。</li><li><code>final</code>，指定该方法不能被重载。</li><li><code>static</code>，指定不需要实例化就可以激活的一个方法。</li><li><code>synchronize</code>，同步修饰符，在多个线程中，该修饰符用于在运行前，对他所属的方法加锁，以防止其他线程的访问，运行结束后解锁。</li><li><code>native</code>，本地修饰符。指定此方法的方法体是用其他语言在程序外部编写的。</li></ul><blockquote><p><a href="https://www.cnblogs.com/tjudzj/p/4443066.html" target="_blank" rel="noopener">《java中的访问修饰符》</a><br><a href="http://www.cnblogs.com/lixiaolun/p/4311727.html" target="_blank" rel="noopener">《java中的类修饰符、成员变量修饰符、方法修饰符》</a></p></blockquote><h4 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h4><p><code>volatile</code>是一个特殊的修饰符，只有成员变量才能使用它。在Java并发程序缺少同步类的情况下，多线程对成员变量的操作对其它线程是透明的。volatile变量可以保证下一个读取操作会在前一个写操作之后发生，就是上一题的volatile变量规则。<br>原理以及底层实现可参考：</p><blockquote><p><a href="http://www.importnew.com/27863.html" target="_blank" rel="noopener">《面试必问的 volatile，你了解多少？》</a><br><a href="http://www.importnew.com/27002.html" target="_blank" rel="noopener">《volatile 关键字实现原理》汇编层面的讲解，推荐！</a></p></blockquote><h5 id="1、volatile-修饰符的有过什么实践"><a href="#1、volatile-修饰符的有过什么实践" class="headerlink" title="1、volatile 修饰符的有过什么实践"></a>1、volatile 修饰符的有过什么实践</h5><h5 id="2、volatile-变量是什么？volatile-变量和-atomic-变量有什么不同"><a href="#2、volatile-变量是什么？volatile-变量和-atomic-变量有什么不同" class="headerlink" title="2、volatile 变量是什么？volatile 变量和 atomic 变量有什么不同"></a>2、volatile 变量是什么？volatile 变量和 atomic 变量有什么不同</h5><p>Java语言提供了一种稍弱的同步机制，即<code>volatile</code>变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为<code>volatile</code>类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。<code>volatile</code>变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取<code>volatile</code>类型的变量时总会返回最新写入的值。<br>在访问<code>volatile</code>变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此<code>volatile</code>变量是一种比<code>sychronized</code>关键字更轻量级的同步机制。</p><h5 id="3、volatile-类型变量提供什么保证？能使得一个非原子操作变成原子操作吗"><a href="#3、volatile-类型变量提供什么保证？能使得一个非原子操作变成原子操作吗" class="headerlink" title="3、volatile 类型变量提供什么保证？能使得一个非原子操作变成原子操作吗?"></a>3、volatile 类型变量提供什么保证？能使得一个非原子操作变成原子操作吗?</h5><p>volatile只提供了保证访问该变量时，每次都是从内存中读取最新值，并不会使用寄存器缓存该值——每次都会从内存中读取。而对该变量的修改，<code>volatile</code>并不提供原子性的保证。那么编译器究竟是直接修改内存的值，还是使用寄存器修改都符合volatile的定义。所以，一句话，<code>volatile</code>并不提供原子性的保证。</p><h5 id="4、能创建-volatile-数组吗？"><a href="#4、能创建-volatile-数组吗？" class="headerlink" title="4、能创建 volatile 数组吗？"></a>4、能创建 volatile 数组吗？</h5><p>可以，<code>volatile</code>修饰的变量如果是对象或数组之类的，其含义是对象获数组的地址具有可见性，但是数组或对象内部的成员改变不具备可见性</p><h5 id="5、transient变量有什么特点"><a href="#5、transient变量有什么特点" class="headerlink" title="5、transient变量有什么特点?"></a>5、transient变量有什么特点?</h5><ul><li>一旦变量被<code>transient</code>修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。</li><li><code>transient</code>关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被<code>transient</code>关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。</li><li>被<code>transient</code>关键字修饰的变量不能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。</li></ul><h5 id="6、super什么时候使用"><a href="#6、super什么时候使用" class="headerlink" title="6、super什么时候使用?"></a>6、super什么时候使用?</h5><p>super主要存在于子类方法中，用于指向子类对象中父类对象。<br>1：访问父类的属性<br>2：访问父类的函数<br>3：访问父类的构造函数</p><h5 id="7、public-static-void-写成-static-public-void会怎样"><a href="#7、public-static-void-写成-static-public-void会怎样" class="headerlink" title="7、public static void 写成 static public void会怎样?"></a>7、public static void 写成 static public void会怎样?</h5><p>一样的</p><h5 id="8、说明一下public-static-void-main-String-args-这段声明里每个关键字的作用"><a href="#8、说明一下public-static-void-main-String-args-这段声明里每个关键字的作用" class="headerlink" title="8、说明一下public static void main(String args[])这段声明里每个关键字的作用?"></a>8、说明一下public static void main(String args[])这段声明里每个关键字的作用?</h5><p>主函数是什么：主函数是一个特殊的函数，作为程序的入口，可以被jvm识别。<br>主函数的定义：</p><ul><li><code>public</code> ：代表该函数的访问权限是最大的。</li><li><code>static</code> ：代表主函数随着类的加载，就已经存在了。</li><li><code>void</code>：  主函数没有具体的返回值</li><li><code>main</code> ： 不是关键字，是一个特殊的单词可以被jvm识别。</li><li><code>(String[] args)</code> 函数的参数，参数类型是一个数组，该数组中的元素是字符串。字符串类型的数组。<br>  主函数的格式是固定的：jvm能够识别</li></ul><h5 id="9、sizeof-是Java-的关键字吗"><a href="#9、sizeof-是Java-的关键字吗" class="headerlink" title="9、sizeof 是Java 的关键字吗?"></a>9、sizeof 是Java 的关键字吗?</h5><p>不是，C和C++用<code>sizeof()</code>解决移植问题，java不需要。</p><h4 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h4><h5 id="1、static-class-与-non-static-class的区别"><a href="#1、static-class-与-non-static-class的区别" class="headerlink" title="1、static class 与 non static class的区别"></a>1、static class 与 non static class的区别</h5><ul><li>内部静态类不需要有指向外部类的引用。但非静态内部类需要持有对外部类的引用。</li><li>非静态内部类能够访问外部类的静态和非静态成员。静态类不能访问外部类的非静态成员。他只能访问外部类的静态成员。</li><li>一个非静态内部类不能脱离外部类实体被创建，一个非静态内部类可以访问外部类的数据和方法，因为他就在外部类里面。</li></ul><p>生命周期（Lifecycle）：</p><ul><li>静态方法（Static Method）与静态成员变量一样，属于类本身，<strong>在类装载的时候被装载到内存</strong>（Memory），不自动进行销毁，会一直存在于内存中，直到JVM关闭。</li><li>非静态方法（Non-Static Method）又叫实例化方法，属于实例对象，实例化后才会分配内存，必须通过类的实例来引用。不会常驻内存，当实例对象被JVM 回收之后，也跟着消失。</li></ul><p>效率：静态方法的使用效率比非静态方法的效率高。</p><p>线程安全</p><ul><li>静态方法是共享代码段，静态变量是共享数据段。既然是“共享”就有并发（Concurrence）的问题。</li><li>非静态方法是针对确定的一个对象的，所以不会存在线程安全的问题。</li><li>静态方法和实例方法是一样的，在类型第一次被使用时加载。调用的速度基本上没有差别。</li></ul><h5 id="2、static-关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法，静态类型有什么特点？"><a href="#2、static-关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法，静态类型有什么特点？" class="headerlink" title="2、static 关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法，静态类型有什么特点？"></a>2、static 关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法，静态类型有什么特点？</h5><p><code>static</code>表示静态的意思，可用于修饰成员变量和成员函数，被静态修饰的成员函数只能访问静态成员，不可以访问非静态成员。静态是随着类的加载而加载的，因此可以直接用类进行访问。 重写是子类中的方法和子类继承的父类中的方法一样（函数名，参数，参数类型，反回值类型），但是子类中的访问权限要不低于父类中的访问权限。重写的前提是必须要继承，<strong><code>private</code>修饰不支持继承，因此被私有的方法不可以被重写</strong>。在Java中，如果父类中含有一个静态方法，且在子类中也含有一个返回类型、方法名、参数列表均与之相同的静态方法，那么该<strong>子类实际上只是将父类中的该同名方法进行了隐藏，而非重写</strong>。换句话说，父类和子类中含有的其实是两个没有关系的方法，它们的行为也并不具有多态性。</p><blockquote><p><a href="http://blog.csdn.net/xiangwanpeng/article/details/52504274?locationNum=12&amp;fps=1" target="_blank" rel="noopener">《static方法能否被重写》</a></p></blockquote><h5 id="3、main-方法为什么必须是静态的？能不能声明-main-方法为非静态？"><a href="#3、main-方法为什么必须是静态的？能不能声明-main-方法为非静态？" class="headerlink" title="3、main() 方法为什么必须是静态的？能不能声明 main() 方法为非静态？"></a>3、main() 方法为什么必须是静态的？能不能声明 main() 方法为非静态？</h5><p>用<code>static</code>修饰的就是静态方法。静态方法不依靠对象而存在。其直接与类有关，只要包含在类中，就可以得到执行，而不一定依附于对象的存在而执行。因此，<code>main</code>方法作为程序的入口方法，在这之前是不可能有任何对象被建立的，也就在<code>main</code>之前包括<code>main</code>自身不可能是非静态方法。所以<code>main</code>方法一定是静态的，有类就行——从而得到执行，进而有更多静态或非静态方法得到执行。</p><h5 id="4、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用"><a href="#4、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用" class="headerlink" title="4、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用"></a>4、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用</h5><p>不可以，静态函数中不能访问非静态成员变量，只能访问静态变量。因为静态优先于对象存在.静态方法中更不可以出现this</p><h5 id="5、静态变量在什么时候加载？编译期还是运行期？静态代码块加载的时机呢？"><a href="#5、静态变量在什么时候加载？编译期还是运行期？静态代码块加载的时机呢？" class="headerlink" title="5、静态变量在什么时候加载？编译期还是运行期？静态代码块加载的时机呢？"></a>5、静态变量在什么时候加载？编译期还是运行期？静态代码块加载的时机呢？</h5><p>静态是随着类的加载而加载的，JVM的代码编译运行顺序是编译、类的加载到执行，属于二者的过渡期。静态代码块也是如此。</p><h5 id="6、成员方法是否可以访问静态变量？为什么静态方法不能访问成员变量？"><a href="#6、成员方法是否可以访问静态变量？为什么静态方法不能访问成员变量？" class="headerlink" title="6、成员方法是否可以访问静态变量？为什么静态方法不能访问成员变量？"></a>6、成员方法是否可以访问静态变量？为什么静态方法不能访问成员变量？</h5><p>成员方法中可以访问静态成员变量。</p><p><strong>请看下面代码来确定程序的打印先后顺序：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        num += <span class="number">3</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test() &#123;System.out.println(d);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;System.out.println(a);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;System.out.println(e);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行顺序如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;        <span class="comment">//1.第一步，准备加载类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> test();        <span class="comment">//4.第四步，new一个类，但在new之前要处理匿名代码块</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">4</span>;    <span class="comment">//2.第二步，静态变量和静态代码块的加载顺序由编写先后决定</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        num += <span class="number">3</span>;</span><br><span class="line">        System.out.println(b);<span class="comment">//5.第五步，按照顺序加载匿名代码块，代码块中有打印</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;                <span class="comment">//6.第六步，按照顺序加载变量</span></span><br><span class="line"></span><br><span class="line">    &#123;  成员变量第三个</span><br><span class="line">        System.out.println(c);    <span class="comment">//7.第七步，按照顺序打印c</span></span><br><span class="line">    &#125;</span><br><span class="line">              <span class="comment">//如果将构造函数和构造代码块互换，依旧还是先执行构造代码块。</span></span><br><span class="line">    test() &#123;  <span class="comment">//类的构造函数，第四个加载</span></span><br><span class="line">        System.out.println(d);     <span class="comment">//8.第八步，最后加载构造函数，完成对象的建立</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;             <span class="comment">//3.第三步，静态块，然后执行静态代码块，因为有输出，故打印a</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span>              <span class="comment">//静态方法，调用的时候才加载 注意看，e没有加载</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>静态块（静态变量）——成员变量——构造方法——静态方法<br>1、静态代码块（只加载一次） 2、构造方法（创建一个实例就加载一次）3、静态方法需要调用才会执行.</p><p><strong>如果类还没有被加载：</strong></p><ul><li>1、先执行父类的静态代码块和静态变量初始化，并且静态代码块和静态变量的执行顺序只跟代码中出现的顺序有关。</li><li>2、执行子类的静态代码块和静态变量初始化。</li><li>3、执行父类的实例变量初始化</li><li>4、执行父类的构造函数（有构造代码块则先执行构造代码块）</li><li>5、执行子类的实例变量初始化</li><li>6、执行子类的构造函数</li></ul><p><strong>如果类已经被加载：</strong><br>则静态代码块和静态变量就不用重复执行，再创建类对象时，只执行与实例相关的变量初始化和构造方法。</p><p>补充构造代码块：给对象进行初始化。对象一建立就运行并且优先于构造函数。<br>构造代码块和构造函数的区别，构造代码块是给所有对象进行统一初始化， 构造函数给对应的对象初始化。</p><h4 id="switch关键字"><a href="#switch关键字" class="headerlink" title="switch关键字"></a>switch关键字</h4><h5 id="1、switch-语句中的表达式可以是什么类型数据？"><a href="#1、switch-语句中的表达式可以是什么类型数据？" class="headerlink" title="1、switch 语句中的表达式可以是什么类型数据？"></a>1、switch 语句中的表达式可以是什么类型数据？</h5><p>switch(A),括号中A的取值可以是<code>byte</code>、<code>short</code>、<code>int</code>、<code>char</code>、<code>String</code>，还有枚举类型。</p><h5 id="2、switch-是否能作用在byte-上，是否能作用在long-上，是否能作用在String上？"><a href="#2、switch-是否能作用在byte-上，是否能作用在long-上，是否能作用在String上？" class="headerlink" title="2、switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上？"></a>2、switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上？</h5><p> Java 7之前，switch后面的括号里面只能放int类型的值，注意是只能放int类型，但是放byte，short，char类型的也可以，是因为byte，short，shar可以自动提升（自动类型转换）为int，不是说就可以放它们，说白了，你放的byte，short，shar类型，然后他们会自动转换为int类型（宽化，自动转换并且安全），其实最后放的还是int类型。String可以了，但是long仍然不行。</p><blockquote><p><strong>1.</strong>小的往大的转换(宽化)，自动转换，有些时候就会自动提升为大的类型，比如switch中<br><strong>2.</strong>大的往小的转换(窄化)必须强制类型转换所以long不行，要想行就得强转如（int）long。同理，float、double也是不行的，要想行就强转。</p></blockquote><h5 id="3、while-循环和-do-循环有什么不同？"><a href="#3、while-循环和-do-循环有什么不同？" class="headerlink" title="3、while 循环和 do 循环有什么不同？"></a>3、while 循环和 do 循环有什么不同？</h5><p><code>while</code>语法格式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式)&#123;</span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>先判断布尔表达式，如果为true就会执行循环体中的语句，然后再判断布尔表达式，如果为true就执行循环体中的语句，一直到布尔表达式为false，然后循环结束。通常用算术运算符（++ – 累减）<br><code>do/while</code>语法格式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure></p><p>先执行一次循环体，然后在判断布尔表达式是不是true，如果是就继续执行循环体，在判断布尔表达式，直到为false就结束循环。<br>两者的区别：<code>while</code>是先判断在执行如果判断不成立，就不会执行；<code>do/while</code>是先执行在判断，不管判断是否成立都会执行一次</p><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><h5 id="1、-amp-操作符和-amp-amp-操作符有什么区别"><a href="#1、-amp-操作符和-amp-amp-操作符有什么区别" class="headerlink" title="1、&amp;操作符和&amp;&amp;操作符有什么区别"></a>1、&amp;操作符和&amp;&amp;操作符有什么区别</h5><p><code>&amp;&amp;</code>运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true整个表达式的值才是true。<code>&amp;&amp;</code>之所以称为短路运算是因为，如果<code>&amp;&amp;</code>左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用<code>&amp;&amp;</code>而不是<code>&amp;</code>。</p><h5 id="2、a-a-b-与-a-b-的区别？"><a href="#2、a-a-b-与-a-b-的区别？" class="headerlink" title="2、a = a + b 与 a += b 的区别？"></a>2、a = a + b 与 a += b 的区别？</h5><p>★ =：<strong>赋值运算符</strong>，在编译器将右边的表达式结果计算出来后，和左边的变量类型比较精度，如果左边的变量精度低于右边的结果的精度，编译器会显式的报错，告诉程序员去强制转型。（若a精度类型弱于b，a = a + b出错，编译检查报错）最后将表达式的结果复制到变量所在的内存区。<br>★ +=：暂且称之为<strong>运算符</strong>，编译器自动隐式直接将+=运算符后面的操作数强制装换为前面变量的类型，然后在变量所在的内存区上直接根据右边的操作数修改左边变量内存存储的二进制数值最后达到和赋值运算符相同的目的。与前者相比，由于后者是位操作，效率也较前者高。</p><h5 id="3、30-1-0-3-将会返回什么？true-还是-false？"><a href="#3、30-1-0-3-将会返回什么？true-还是-false？" class="headerlink" title="3、30.1 == 0.3 将会返回什么？true 还是 false？"></a>3、30.1 == 0.3 将会返回什么？true 还是 false？</h5><p>False，类型不一致。</p><h5 id="4、float-f-3-4-是否正确？"><a href="#4、float-f-3-4-是否正确？" class="headerlink" title="4、float f=3.4; 是否正确？"></a>4、float f=3.4; 是否正确？</h5><p>不正确。<code>3.4</code>是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换<code>float f =(float)3.4</code>; 或者写成<code>float f =3.4F;</code>。</p><h5 id="5、short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗？"><a href="#5、short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗？" class="headerlink" title="5、short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？"></a>5、short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？</h5><p>对于<code>short s1 = 1; s1 = s1 + 1;</code>由于1是<code>int</code>类型，因此<code>s1+1</code>运算结果也是<code>int</code> 型，需要强制转换类型才能赋值给<code>short</code>型。而<code>short s1 = 1; s1 += 1;</code>可以正确编译，因为<code>s1+= 1;</code>相当于<code>s1 = (short)(s1 + 1);</code>其中有隐含的强制类型转换。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;final-finalize-finally关键字&quot;&gt;&lt;a href=&quot;#final-finalize-finally关键字&quot; class=&quot;headerlink&quot; title=&quot;final,finalize,finally关键字&quot;&gt;&lt;/a&gt;final,finalize,finally关键字&lt;/h4&gt;&lt;h5 id=&quot;1-finalize和final关键字&quot;&gt;&lt;a href=&quot;#1-finalize和final关键字&quot; class=&quot;headerlink&quot; title=&quot;1.finalize和final关键字&quot;&gt;&lt;/a&gt;1.finalize和final关键字&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;什么是finalize()方法？finalize()方法什么时候被调用？&lt;/strong&gt;&lt;br&gt;答： Java允许在类中定义一个名为&lt;code&gt;finalize()&lt;/code&gt;的方法，一旦垃圾回收器准备好释放对象占用的存储空间，将首先调用&lt;code&gt;finalize()&lt;/code&gt;方法，并且在下一次垃圾回收动作发生时，才会真正回收对象占用的内存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;析构函数(finalization)的目的是什么&lt;/strong&gt;&lt;br&gt;析构函数目的是撤销对象前、完成一些清理工作，比如释放资源。释放了之后这些资源可以被回收，重新利用。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://tisonkong.github.io/github.io/categories/Java/"/>
    
    
      <category term="Interview" scheme="https://tisonkong.github.io/github.io/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程（OOP）知识点总结</title>
    <link href="https://tisonkong.github.io/github.io/2018/02/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88OOP%EF%BC%89%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://tisonkong.github.io/github.io/2018/02/02/面向对象编程（OOP）知识点总结/</id>
    <published>2018-02-02T13:50:18.966Z</published>
    <updated>2018-02-02T14:33:12.255Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-面向对象的基本概念"><a href="#一-面向对象的基本概念" class="headerlink" title="一.面向对象的基本概念"></a>一.面向对象的基本概念</h4><h5 id="1-解释下多态性（polymorphism），封装性（encapsulation），内聚（cohesion）以及耦合（coupling）"><a href="#1-解释下多态性（polymorphism），封装性（encapsulation），内聚（cohesion）以及耦合（coupling）" class="headerlink" title="1.解释下多态性（polymorphism），封装性（encapsulation），内聚（cohesion）以及耦合（coupling）"></a>1.解释下多态性（polymorphism），封装性（encapsulation），内聚（cohesion）以及耦合（coupling）</h5><p><strong>抽象</strong>：抽象是将一类对象的共同特征总结出来构造类的过程，包括<strong>数据抽象</strong>和<strong>行为抽象</strong>两方面。抽象<strong>只关注对象有哪些属性和行为</strong>，并不关注这些行为的细节是什么。</p><p><strong>封装</strong>：通常认为<strong>封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口</strong>。面向对象的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的差别，明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是封装得足够好的，因为几个按键就搞定了所有的事情）。<br><a id="more"></a><br><strong>内聚</strong>：进行架构设计时的内聚高低是指，<strong>设计某个模块或者关注点时，模块或关注点内部的一系列相关功能的相关程度的高低</strong>。高内聚提供了更好的可维护性和可复用性。而低内聚的模块则表名模块直接的依赖程度高，那么一旦修改了该模块依赖的对象则无法使用该模块，必须也进行相应的修改才可以继续使用。</p><p><strong>耦合</strong>：简单地说，软件工程中对象之间的<strong>耦合度就是对象之间的依赖性</strong>。指导使用和维护对象的主要问题是对象之间的多重依赖性。对象之间的耦合越高，维护成本越高。因此对象的设计应使类和构件之间的耦合最小。<strong>耦合性是程序结构中各个模块之间相互关联的度量</strong>。它取决于各个模块之间的接口的复杂程度、调用模块的方式以及哪些信息通过接口。</p><p>耦合可以分为以下几种，它们之间的耦合度由高到低排列如下：</p><ul><li><strong>内容耦合</strong>。当一个模块直接修改或操作另一个模块的数据时，或一个模块不通过正常入口而转入另一个模块时，这样的耦合被称为内容耦合。内容耦合是最高程度的耦合，应该避免使用之。</li><li><strong>公共耦合</strong>。两个或两个以上的模块共同引用一个全局数据项，这种耦合被称为公共耦合。在具有大量公共耦合的结构中，确定究竟是哪个模块给全局变量赋了一个特定的值是十分困难的。</li><li><strong>外部耦合</strong> 。一组模块都访问同一全局简单变量而不是同一全局数据结构，而且不是通过参数表传递该全局变量的信息，则称之为外部耦合。<br>控制耦合 。一个模块通过接口向另一个模块传递一个控制信号，接受信号的模块根据信号值而进行适当的动作，这种耦合被称为控制耦合。<br>标记耦合 。若一个模块A通过接口向两个模块B和C传递一个公共参数，那么称模块B和C之间存在一个标记耦合。</li><li><strong>数据耦合</strong>。模块之间通过参数来传递数据，那么被称为数据耦合。数据耦合是最低的一种耦合形式，系统中一般都存在这种类型的耦合，因为为了完成一些有意义的功能，往往需要将某些模块的输出数据作为另一些模块的输入数据。</li><li><strong>非直接耦合</strong> 。两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制和调用来实现的。<br><img src="http://upload-images.jianshu.io/upload_images/8926909-d63352e73d06a55c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="高内聚&amp;低耦合"><blockquote><p><a href="http://www.cnblogs.com/corvoh/p/5747856.html" target="_blank" rel="noopener">参考：《面向对象三大特性五大原则 + 低耦合高内聚》</a></p></blockquote></li></ul><h5 id="2-多态的用途和实现原理"><a href="#2-多态的用途和实现原理" class="headerlink" title="2.多态的用途和实现原理"></a>2.多态的用途和实现原理</h5><blockquote><p><strong>1、编译时多态（又称静态多态）<br>2、运行时多态（又称动态多态）</strong></p></blockquote><p><strong>重载（overload）</strong>就是<strong>编译时多态</strong>的一个例子，编译时多态在编译时就已经确定，运行时运行的时候调用的是确定的方法。<br>我们通常所说的<strong>多态指的都是运行时多态</strong>，也就是编译时不确定究竟调用哪个具体方法，一直延迟到运行时才能确定。这也是为什么有时候多态方法又被称为<strong>延迟方法</strong>的原因。</p><ul><li>多态通常有两种实现方法：<br>1、子类继承父类（extends）<br>2、子类实现接口（implements）</li><li><strong>多态最大的用途</strong><br>个人认为在于<strong>对设计和架构的复用</strong>，更进一步来说，《<a href="http://book.douban.com/subject/1052241/" target="_blank" rel="noopener">设计模式</a>》中提倡的针对接口编程而不是针对实现编程就是充分利用多态的典型例子。<strong>定义功能和组件时定义接口，实现可以留到之后的流程中。</strong>同时一个接口可以有多个实现，甚至于完全可以在一个设计中同时使用一个接口的多种实现。</li><li><strong>多态实现原理</strong><br>多态允许具体访问时实现方法的动态绑定。Java对于动态绑定的实现主要<strong>依赖于方法表</strong>，通过继承和接口的多态实现有所不同。<br><strong>继承</strong>：在执行某个方法时，在方法区中找到该类的方法表，再确认该方法在方法表中的偏移量，找到该方法后如果被重写则直接调用，否则认为没有重写父类该方法，这时会按照继承关系搜索父类的方法表中该偏移量对应的方法。<br><strong>接口</strong>：Java 允许一个类实现多个接口，从某种意义上来说相当于多继承，这样同一个接口的的方法在不同类方法表中的位置就可能不一样了。所以不能通过偏移量的方法，而是通过搜索完整的方法表。<br><em>tips：因为每次接口调用都要搜索方法表，所以从效率上来说，接口方法的调用总是慢于类方法的调用的。</em></li></ul><blockquote><p><a href="http://www.cnblogs.com/crane-practice/p/3671074.html" target="_blank" rel="noopener">《Java 多态的实现机制》</a><br><a href="http://blog.csdn.net/seu_calvin/article/details/52191321" target="_blank" rel="noopener">《Java技术——多态的实现原理》</a></p></blockquote><h5 id="3-对象封装的原则是什么"><a href="#3-对象封装的原则是什么" class="headerlink" title="3.对象封装的原则是什么?"></a>3.对象封装的原则是什么?</h5><p>在面向对象程式设计方法中，封装（英语：Encapsulation）是指一种将抽象性函式接口的实现细节部份包装、隐藏起来的方法。封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。要访问该类的代码和数据，必须通过严格的接口控制。封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。</p><ul><li>修改属性的可见性来限制对属性的访问（一般限制为private）；</li><li>对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问；</li></ul><h5 id="4-获得一个类的类对象有哪些方式？"><a href="#4-获得一个类的类对象有哪些方式？" class="headerlink" title="4.获得一个类的类对象有哪些方式？"></a>4.获得一个类的类对象有哪些方式？</h5><ul><li>1.通过对象的getClass方法进行获取。这种方式需要具体的类和该类的对象，以及调用getClass方法。</li><li>2.任何数据类型(包括基本数据类型)都具备着一个静态的属性class，通过它可直接获取到该类型对应的Class对象。这种方式要使用具体的类，然后调用类中的静态属性class完成，无需调用方法，性能更好。</li><li>3.通过Class.forName()方法获取。这种方式仅需使用类名，就可以获取该类的Class对象，更有利于扩展。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示获取Class c对象的三种方法</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@fileName</span> ReflectGetClass.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectGetClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 法1：通过对象---对象.getClass()来获取c(一个Class对象)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person p=<span class="keyword">new</span> Person(<span class="string">"Jack"</span>, <span class="number">23</span>);</span><br><span class="line">        Class c=p.getClass();<span class="comment">//来自Object方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 法2：通过类(类型)---任何数据类型包括(基本数据类型)</span></span><br><span class="line"><span class="comment">     * 都有一个静态的属性class ，他就是c 一个Class对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class c=Person.class;</span><br><span class="line">        Class c2=<span class="keyword">int</span>.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 法3：通过字符串(类全名 )---能够实现解耦：Class.forName(str)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class c=Class.forName(<span class="string">"cn.hncu.reflect.test.Person"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？"><a href="#5-重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？" class="headerlink" title="5.重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？"></a>5.重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？</h5><p><strong>一、重写（override）</strong><br>override是重写（覆盖）了一个方法，以实现不同的功能。一般是用于子类在继承父类时，重写（重新实现）父类中的方法。重写（覆盖）的规则：</p><ul><li>1、重写方法的参数列表必须完全与被重写的方法的相同,否则不能称其为重写而是重载.</li><li>2、重写方法的访问修饰符一定要大于被重写方法的访问修饰符（public&gt;protected&gt;default&gt;private）。</li><li>3、重写的方法的返回值必须和被重写的方法的返回一致；</li><li>4、重写的方法所抛出的异常必须和被重写方法的所抛出的异常一致，或者是其子类；</li><li>5、被重写的方法不能为private，否则在其子类中只是新定义了一个方法，并没s有对其进行重写。</li><li>6、静态方法不能被重写为非静态的方法（会编译出错）。<br><strong>二、overload是重载</strong><br>一般是用于在一个类内实现若干重载的方法，这些方法的名称相同而参数形式不同。<br>重载的规则：</li><li>1、在使用重载时只能通过相同的方法名、不同的参数形式实现。不同的参数类型可以是不同的参数类型，不同的参数个数，不同的参数顺序（参数类型必须不一样）；</li><li>2、不能通过访问权限、返回类型、抛出的异常进行重载；</li><li>3、方法的异常类型和数目不会对重载造成影响；<br>多态的概念比较复杂，有多种意义的多态，一个有趣但不严谨的说法是：继承是子类使用父类的方法，而多态则是父类使用子类的方法。一般，我们使用多态是为了避免在父类里大量重载引起代码臃肿且难于维护。<br>《java编程思想》中很好的回答了<strong>不能以返回值来区分重载方法：</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br></pre></td></tr></table></figure></li></ul><p>假如有<code>int x=f()</code>,这里是可以区分重载方法，但有时候并不需要返回值，只是调用方法，那么像这样的<code>f()</code>就让人无法理解了。</p><h5 id="6-说出几条-Java-中方法重载的最佳实践？"><a href="#6-说出几条-Java-中方法重载的最佳实践？" class="headerlink" title="6.说出几条 Java 中方法重载的最佳实践？**"></a>6.说出几条 Java 中方法重载的最佳实践？**</h5><ul><li>a）不要重载这样的方法：一个方法接收 int 参数，而另个方法接收 Integer 参数。</li><li>b）不要重载参数数量一致，而只是参数顺序不同的方法。</li><li>c）如果重载的方法参数个数多于 5 个，采用<strong>可变参数</strong>。</li></ul><h4 id="二、抽象类和接口"><a href="#二、抽象类和接口" class="headerlink" title="二、抽象类和接口"></a>二、抽象类和接口</h4><h5 id="1-抽象类和接口的区别"><a href="#1-抽象类和接口的区别" class="headerlink" title="1.抽象类和接口的区别"></a>1.抽象类和接口的区别</h5><ul><li><strong>一、相似性</strong></li><li>接口和抽象类都不能被实例化，它们都位于继承树的顶端，用于被其他类实现和继承。</li><li>接口和抽象类都可以包含抽象方法，实现接口或继承抽象类的普通子类都必须实现这些抽象方法。<br><strong>二、接口和抽象类的区别</strong></li><li>接口里只能包含抽象方法，静态方法和默认方法，不能为普通方法提供方法实现，抽象类则完全可以包含普通方法。</li><li>接口里只能定义静态常量，不能定义普通成员变量，抽象类里则既可以定义普通成员变量，也可以定义静态常量。</li><li>接口不能包含构造器，抽象类可以包含构造器，抽象类里的构造器并不是用于创建对象，而是让其子类调用这些构造器来完成属于抽象类的初始化操作。</li><li>接口里不能包含初始化块，但抽象类里完全可以包含初始化块。</li><li>一个类最多只能有一个直接父类，包括抽象类，但一个类可以直接实现多个接口，通过实现多个接口可以弥补Java单继承不足。<blockquote><p>接口可以继承接口。<br>抽象类可以实现(implements)接口<br>抽象类可继承具体类。<br>抽象类中可以有静态的main方法。</p></blockquote></li></ul><p>备注：只要明白了接口和抽象类的本质和作用，这些问题都很好回答，你想想，如果你是java语言的设计者，你是否会提供这样的支持，如果不提供的话，有什么理由吗？如果你没有道理不提供，那答案就是肯定的了。只有记住抽象类与普通类的唯一区别就是不能创建实例对象和允许有abstract方法。</p><h5 id="2-java接口的基本概念，是否可继承，以及优点？"><a href="#2-java接口的基本概念，是否可继承，以及优点？" class="headerlink" title="2.java接口的基本概念，是否可继承，以及优点？"></a>2.java接口的基本概念，是否可继承，以及优点？</h5><p><strong>接口（Interface）</strong>，在JAVA编程语言中是一个抽象类型，是抽象方法的集合。接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。如果一个类只由抽象方法和全局常量组成，那么这种情况下不会将其定义为一个抽象类。只会定义为一个接口，所以接口严格的来讲属于一个特殊的类，而这个类里面只有抽象方法和全局常量，就连构造方法也没有。</p><ul><li>一个接口可以继承多个接口.<br><code>interface C extends A, B {}</code>是可以的.</li><li>一个类可以实现多个接口:<br><code>class D implements A,B,C{}</code></li><li>但是一个类只能继承一个类,不能继承多个类<br><code>class B extends A{}</code></li><li>在继承类的同时,也可以继承接口:<br><code>class E extends D implements A,B,C{}</code><br>这也正是选择用接口而不是抽象类的原因</li></ul><h5 id="3、接口的优点或者说面向接口编程的思想是什么（这里要结合运行时多态更好理解）"><a href="#3、接口的优点或者说面向接口编程的思想是什么（这里要结合运行时多态更好理解）" class="headerlink" title="3、接口的优点或者说面向接口编程的思想是什么（这里要结合运行时多态更好理解）"></a>3、接口的优点或者说面向接口编程的思想是什么（这里要结合运行时多态更好理解）</h5><p>在系统分析和架构中，分清层次和依赖关系，每个层次不是直接向其上层提供服务（即不是直接实例化在上层中），而是<strong>通过定义一组接口，仅向上层暴露其接口功能，上层对于下层仅仅是接口依赖，而不依赖具体类</strong>。<br>好处：首先对系统灵活性大有好处。当下层需要改变时，只要接口及接口功能不变，则上层不用做任何修改。甚至可以在不改动上层代码时将下层整个替换掉。接口体现的是一种规范和实现分离的设计哲学，充分利用接口可以极好地降低程序各模块之间的耦合，从而提高系统的可扩展性和可维护性。基于这种原则，通常推荐“面向接口”编程，而不是面向实现类编程，希望通过面向接口编程来降低程序的耦合。<br>总的来说就是：<strong>降低程序耦合度，提高系统的可扩展性和维护性。</strong></p><h4 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h4><p><strong>1、继承（Inheritance）与聚合（Aggregation）的区别在哪里</strong><br><strong>2、继承和组合之间有什么不同</strong></p><ul><li>如果存在一种IS-A的关系（比如Bee“是一个”Insect），并且一个类需要向另一个类暴露所有的方法接口，那么更应该用继承的机制。</li><li>如果存在一种HAS-A的关系（比如Bee“有一个”attack功能），那么更应该运用组合。</li></ul><p><strong>3、为什么类只能单继承，接口可以多继承</strong><br>首先，类的多继承有缺点：<br>第一，如果一个类继承多个父类，如果父类中的方法名如果相同，那么就会产生歧义。<br>第二，如果父类中的方法同名，子类中没有覆盖，同样会产生上面的错误。<br>但是接口就设计成多继承，是因为接口可以避免上述问题：<br>首先，接口中的只有抽象方法和静态常量。对于一个类实现多个接口的情况和一个接口继承多个接口的情况，因为接口只有抽象方法，具体方法只能由实现接口的类实现（也是因为实现类一定会覆盖接口中的方法），在调用的时候始终只会调用实现类（也就是子类覆盖的方法）的方法（不存在歧义），因此不存在 多继承的第二个缺点；而又因为接口只有静态的常量，但是由于静态变量是在编译期决定调用关系的，即使存在一定的冲突也会在编译时提示出错；而引用静态变量一般直接使用类名或接口名，从而避免产生歧义，因此也不存在多继承的第一个缺点。<br><strong>4、存在两个类，C 继承 B，B 继承 A，能将 B 转换为 C 么？如 C = (C) B</strong><br>不能转换，测试代码报错：<br><code>Exception in thread &quot;main&quot; java.lang.ClassCastException: interfaceDemo.B cannot be cast to interfaceDemo.C</code></p><p><strong>5、如果类 a 继承类 b，实现接口c，而类 b 和接口 c 中定义了同名变量，请问会出现什么问题</strong></p><h4 id="四、泛型"><a href="#四、泛型" class="headerlink" title="四、泛型"></a>四、泛型</h4><h5 id="1、泛型的存在是用来解决什么问题？"><a href="#1、泛型的存在是用来解决什么问题？" class="headerlink" title="1、泛型的存在是用来解决什么问题？"></a>1、泛型的存在是用来解决什么问题？</h5><p>首先需要明确泛型的概念，<strong>泛型（Generics ）</strong>是把类型参数化，运用于类、接口、方法中，可以通过执行泛型类型调用 分配一个类型，将用分配的具体类型替换泛型类型。然后，所分配的类型将用于限制容器内使用的值，这样就无需进行类型转换，还可以在编译时提供更强的类型检查。<br>总结来说就是：<br>（1）消除显示的强制类型转换，提高代码复用<br>（2）提供更强的类型检查，避免运行时的<code>ClassCastException</code>。<br>这个问题产生的背景是针对容器中，基于继承的泛型实现会带来两个问题，请看代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123; ... &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基于继承的泛型实现会带来两个问题：第一个问题是有关<code>get()</code>方法的，我们每次调用<code>get()</code>方法都会返回一个<code>Object</code>对象，每一次都要强制类型转换为我们需要的类型，这样会显得很麻烦；第二个问题是有关add方法的，假如我们往聚合了<code>String</code>对象的<code>ArrayList</code>中加入一个<code>File</code>对象，编译器不会产生任何错误提示，而这不是我们想要的。所以，从Java 5开始，ArrayList在使用时可以加上一个类型参数（type parameter），这个类型参数用来指明ArrayList中的元素类型。类型参数的引入解决了以上提到的两个问题，如以下代码所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; s = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">s.add(<span class="string">"abc"</span>);</span><br><span class="line">String s = s.get(<span class="number">0</span>); <span class="comment">//无需进行强制转换</span></span><br><span class="line">s.add(<span class="number">123</span>);  <span class="comment">//编译错误，只能向其中添加String对象</span></span><br></pre></td></tr></table></figure></p><h5 id="2、泛型的常用特点？"><a href="#2、泛型的常用特点？" class="headerlink" title="2、泛型的常用特点？"></a>2、泛型的常用特点？</h5><p>这里其实问的就是泛型在使用过程中遵循的相关规范。类型参数（又称类型变量）用作占位符，指示在运行时为类分配类型。根据需要，可能有一个或多个类型参数，并且可以用于整个类。根据惯例，类型参数是单个大写字母，该字母用于指示所定义的参数类型。下面列出每个用例的标准类型参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E：元素</span><br><span class="line">K：键</span><br><span class="line">N：数字</span><br><span class="line">T：类型</span><br><span class="line">V：值</span><br><span class="line">S、U、V 等：多参数情况中的第 <span class="number">2</span>、<span class="number">3</span>、<span class="number">4</span> 个类型</span><br><span class="line">? 表示不确定的java类型（无限制通配符类型）</span><br></pre></td></tr></table></figure></p><blockquote><p><a href="http://www.importnew.com/27037.html" target="_blank" rel="noopener">《Java 泛型一览笔录》</a><br><a href="http://www.importnew.com/19740.html" target="_blank" rel="noopener">《深入理解Java之泛型》</a></p><h4 id="五、匿名内部类"><a href="#五、匿名内部类" class="headerlink" title="五、匿名内部类"></a>五、匿名内部类</h4><p><strong>内部类（nested classes）</strong>，面向对象程序设计中，可以在一个类的内部定义另一个类。嵌套类分为两种，即静态嵌套类和非静态嵌套类。静态嵌套类使用很少，最重要的是非静态嵌套类，也即是被称作为内部类(inner)。内部类是JAVA语言的主要附加部分。内部类几乎可以处于一个类内部任何位置，可以与实例变量处于同一级，或处于方法之内，甚至是一个<a href="http://baike.baidu.com/view/420676.htm" target="_blank" rel="noopener">表达式</a>的一部分。</p><h5 id="1、匿名内部类是否可以继承其它类？是否可以实现接口？"><a href="#1、匿名内部类是否可以继承其它类？是否可以实现接口？" class="headerlink" title="1、匿名内部类是否可以继承其它类？是否可以实现接口？"></a>1、匿名内部类是否可以继承其它类？是否可以实现接口？</h5><p>使用匿名内部类我们必须要继承一个父类或者实现一个接口，当然也仅能只继承一个父类或者实现一个接口。同时它也是没有class关键字，这是因为匿名内部类是直接使用new来生成一个对象的引用，当然这个引用是隐式的。不可以继承其它类和实现接口。</p></blockquote><h5 id="2、内部类分为几种？"><a href="#2、内部类分为几种？" class="headerlink" title="2、内部类分为几种？"></a>2、内部类分为几种？</h5><blockquote><ul><li>成员内部类，在一个类（外部类）中直接定义的内部类；</li><li>局部内部类，在一个方法（外部类的方法）中定义的内部类;</li><li>匿名内部类，</li></ul></blockquote><p><strong>1.成员内部类</strong><br>可以访问它的外部类的所有成员变量和方法，不管是静态的还是非静态的都可以。<br>在外部类里面创建成员内部类的实例：<code>this.new B()；</code><br>在外部类之外创建内部类的实例：<code>(new Test1()).new B().go();</code><br><strong>2.局部内部类</strong><br>定义在方法中，比方法的范围还小。是内部类中最少用到的一种类型。像局部变量一样，不能被<code>public</code>,<code>protected</code>, <code>private</code>和<code>static</code>修饰。只能访问方法中定义的final类型的局部变量。<br>方法内部类在方法中定义，所以只能在方法中使用，即只能在方法当中生成方法内部类的实例并且调用其方法。<br><strong>3.匿名内部类</strong><br>没有名字的局部内部类，不使用关键字class, extends, implements, 没有构造方法。什么情况下需要使用匿名内部类？如果满足下面的一些条件，使用匿名内部类是比较合适的：</p><ul><li>只用到类的一个实例。</li><li>类在定义后马上用到。</li><li>类非常小（SUN推荐是在4行代码以下）</li><li>给类命名并不会导致你的代码更容易被理解。</li></ul><p><strong>在使用匿名内部类时，要记住以下几个原则：</strong></p><ul><li>匿名内部类不能有构造方法。</li><li>匿名内部类不能定义任何静态成员、方法和类。</li><li>匿名内部类不能是public,protected,private,static。</li><li>只能创建匿名内部类的一个实例。</li><li>一个匿名内部类一定是在new的后面，用其隐含实现一个接口或实现一个类。</li><li>因匿名内部类为局部内部类，所以局部内部类的所有限制都对其生效。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例代码</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">innerclass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        innerclass i = <span class="keyword">new</span> innerclass() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类"</span>);</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        i.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>匿名内部类的高频使用场景是在多线程下(灵活使用箭头函数语法糖)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8之前：</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before Java8, too much code for too little to do"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java 8方式：</span></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"In Java8, Lambda expression!!"</span>) ).start();</span><br></pre></td></tr></table></figure></p><h5 id="3、内部类可以引用它的包含类（外部类）的成员吗？"><a href="#3、内部类可以引用它的包含类（外部类）的成员吗？" class="headerlink" title="3、内部类可以引用它的包含类（外部类）的成员吗？"></a>3、内部类可以引用它的包含类（外部类）的成员吗？</h5><p>内部类可以直接访问外部类的成员属性</p><h5 id="4、请说一下-Java-中为什么要引入内部类？还有匿名内部类？"><a href="#4、请说一下-Java-中为什么要引入内部类？还有匿名内部类？" class="headerlink" title="4、请说一下 Java 中为什么要引入内部类？还有匿名内部类？"></a>4、请说一下 Java 中为什么要引入内部类？还有匿名内部类？</h5><ul><li>内部类对象可以访问创建它的对象的实现，包括私有数据；</li><li>内部类不为同一包的其他类所见，具有很好的封装性；</li><li>使用内部类可以很方便的编写事件驱动程序；</li><li>匿名内部类可以方便的定义运行时回调；</li><li>内部类可以方便的定义</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一-面向对象的基本概念&quot;&gt;&lt;a href=&quot;#一-面向对象的基本概念&quot; class=&quot;headerlink&quot; title=&quot;一.面向对象的基本概念&quot;&gt;&lt;/a&gt;一.面向对象的基本概念&lt;/h4&gt;&lt;h5 id=&quot;1-解释下多态性（polymorphism），封装性（encapsulation），内聚（cohesion）以及耦合（coupling）&quot;&gt;&lt;a href=&quot;#1-解释下多态性（polymorphism），封装性（encapsulation），内聚（cohesion）以及耦合（coupling）&quot; class=&quot;headerlink&quot; title=&quot;1.解释下多态性（polymorphism），封装性（encapsulation），内聚（cohesion）以及耦合（coupling）&quot;&gt;&lt;/a&gt;1.解释下多态性（polymorphism），封装性（encapsulation），内聚（cohesion）以及耦合（coupling）&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;抽象&lt;/strong&gt;：抽象是将一类对象的共同特征总结出来构造类的过程，包括&lt;strong&gt;数据抽象&lt;/strong&gt;和&lt;strong&gt;行为抽象&lt;/strong&gt;两方面。抽象&lt;strong&gt;只关注对象有哪些属性和行为&lt;/strong&gt;，并不关注这些行为的细节是什么。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;封装&lt;/strong&gt;：通常认为&lt;strong&gt;封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口&lt;/strong&gt;。面向对象的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的差别，明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是封装得足够好的，因为几个按键就搞定了所有的事情）。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://tisonkong.github.io/github.io/categories/Java/"/>
    
    
      <category term="Interview" scheme="https://tisonkong.github.io/github.io/tags/Interview/"/>
    
  </entry>
  
</feed>
